const fs = require('fs');
const path = require('path');
const { promisify } = require('util'); // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç f —Å –∫–æ–ª–±—ç–∫–æ–º -> –≤ f, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –ø—Ä–æ–º–∏—Å
const createReadlineInterface = require('../utils/create-readline');

// –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
const logFileName = process.argv[2];

if (!logFileName) {
  console.error('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ª–æ–≥-—Ñ–∞–π–ª–∞.');
  process.exit(1);
}

// —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ logs:
const logFilePath = path.join(__dirname, '..', 'logs', logFileName);

// –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:
const dir = path.dirname(logFilePath);

// –µ–ª—Å–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –µ—ë:
if (!fs.existsSync(dir)) {
  fs.mkdirSync(dir, { recursive: true });
}

const rl = createReadlineInterface();

// –º–µ—Ç–æ–¥ .question() —É –æ–±—ä–µ–∫—Ç–∞ rl –¥–µ–ª–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å async/await:
const askQuestion = promisify(rl.question).bind(rl); // –≤–∞–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç!!!

// —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
const logResult = ({ input, answer, win }) => {
  const content = {
    date: new Date().toISOString(),
    input,
    answer,
    win,
  };

  const prettyContent = JSON.stringify(content)
    .replace(/{/g, '{ ')
    .replace(/}/g, ' }')
    .replace(/":/g, '": ')
    .replace(/,/g, ', ');

  // –¥–æ–∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª:
  fs.appendFile(logFilePath, prettyContent + '\n', (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª:', err.message);
    }
  });
};

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (1 ‚Äî –û—Ä—ë–ª, 2 ‚Äî –†–µ—à–∫–∞):
const getRandomFlip = () => (Math.random() < 0.5 ? 1 : 2);

const startGame = async() => {
  console.log(`
========================================
        –ò–ì–†–ê "–û–†–Å–õ –ò–õ–ò –†–ï–®–ö–ê"
----------------------------------------
–í—ã–±–µ—Ä–∏—Ç–µ 1 (–û—Ä—ë–ª) –∏–ª–∏ 2 (–†–µ—à–∫–∞), —á—Ç–æ–±—ã
—É–≥–∞–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç–∫–∏.
========================================`);

  while (true) {
    console.log('\nü™ô –ë—Ä–æ—Å–∞—é –º–æ–Ω–µ—Ç–∫—É...');
    const inputStr = await askQuestion('–í–∞—à –≤—ã–±–æ—Ä (1 - –û—Ä—ë–ª, 2 - –†–µ—à–∫–∞): '); // –∫–æ–ª–ª–±—ç–∫ –Ω–µ –Ω—É–∂–µ–Ω
    const input = Number(inputStr.trim());

    if (input !== 1 && input !== 2) {
      console.log('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ 1 (–û—Ä—ë–ª) –∏–ª–∏ 2 (–†–µ—à–∫–∞).');
      continue; // –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    }

    const answer = getRandomFlip();
    const win = input === answer;

    console.log(
      `–í—ã–ø–∞–ª–æ: ${answer === 1 ? '–û—Ä—ë–ª' : '–†–µ—à–∫–∞'}. –í—ã ${
        win ? '—É–≥–∞–¥–∞–ª–∏ üéâ' : '–Ω–µ —É–≥–∞–¥–∞–ª–∏ üòû'
      }.`,
    );

    logResult({ input, answer, win });

    let cont = await askQuestion('\n–°—ã–≥—Ä–∞—Ç—å –µ—â—ë? (y/n): ');
    cont = cont.trim().toLowerCase();

    if (cont !== 'y') {
      console.log('\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!');
      break;
    }
  }

  rl.close();
};

startGame();
